from collections import defaultdict
import boto3
import json
import datetime

# Checks if the event was generated by a Lambda Function
def is_attached_to_lambda(event):
    if 'description' in event['requestParameters']:
        if event['requestParameters']['description'].split(":")[0] == 'AWS Lambda VPC ENI':
                return True
    return False

# Groups ENIs by function name and subnetId and returns a list of metrics that can be sent to cloudwatch
def extract_lambda_metric_data(events):
    lambda_events = defaultdict(dict)
    for event in events:
        load = json.loads(event['CloudTrailEvent'])
        if is_attached_to_lambda(load):
            if load['requestParameters']['subnetId'] not in lambda_events[event['Username']]:
                lambda_events[event['Username']][load['requestParameters']['subnetId']] = 0
            lambda_events[event['Username']][load['requestParameters']['subnetId']] += 1
    return lambda_events

def format_metrics_for_cloudwatch(lambda_events):
    metric_data = []
    for function, subnets in lambda_events.items():
        for subnet in subnets:
            metric_data.append(
                {
                    'MetricName': 'ENI-Create-Events',
                    'Dimensions': [
                        {
                            'Name': 'SubnetID',
                            'Value': subnet
                        },
                        {
                            'Name': 'FunctionName',
                            'Value': function
                        }
                    ],
                    'Value': lambda_events[function][subnet],
                    'Unit': 'Count',
                    'StorageResolution': 60
                })
    return metric_data

# Puts metric data to cloudwatch under IPUsage namespace
def put_metrics_to_cloudwatch(metric_data):
    cloudwatch_client = boto3.client('cloudwatch')
    cloudwatch_client.put_metric_data(Namespace='Lambda-Custom', MetricData=metric_data)

# Entrypoint for the function
def lambda_handler(event, context):
    end_time = datetime.datetime.now().replace(minute=0, second=0, microsecond=0)
    start_time = end_time - datetime.timedelta(hours=1)
    client = boto3.client('cloudtrail')
    events = client.lookup_events(
        LookupAttributes=[
                {
                    'AttributeKey': 'EventName',
                    'AttributeValue': 'CreateNetworkInterface'
                }
                ],
            StartTime=start_time,
            EndTime=end_time
        )['Events']
    metric_data = format_metrics_for_cloudwatch(extract_lambda_metric_data(events))
    if metric_data != []:
        put_metrics_to_cloudwatch(metric_data)
